package info.kwarc.mmt.odk.diagops

import info.kwarc.mmt.api._
import info.kwarc.mmt.api.modules._
import info.kwarc.mmt.api.modules.diagrams.{DiagramInterpreter, Diagram, OperatorDSL, ParametricLinearOperator, SystematicRenamer, SimpleLinearModuleTransformer, SimpleLinearOperator, SystematicRenamingUtils}
import info.kwarc.mmt.api.objects._
import info.kwarc.mmt.api.symbols.Constant
import info.kwarc.mmt.api.utils.UnicodeStrings
import info.kwarc.mmt.lf.ApplySpine
import info.kwarc.mmt.odk.IntegerLiterals
import info.kwarc.mmt.odk.LFX.{Getfield, ModelsOf}
import info.kwarc.mmt.odk.diagops.OpUtils.GeneralApplySpine

// todo generate definienses (i.e. proofs) too here
private[diagops] trait ModRelClosureCreator[T] {
  /**
    * The number of models the relation relates.
    *
    * Must be a constant and >= 1.
    */
  def relationArity: Int

  /**
    * Constructs the term representing the universe for tp in the [[structureIdx]]-th model.
    *
    * Read the documentation for [[applyFunctionSymbol()]]. In the examples there, terms like ''∀[x₁: tm Uᵖ, x₂: tm Uᵖ]''
    * actually mean the return value of ''∀[x₁: applyTypeSymbolRef(0, U), x₂: tm applyTypeSymbolRef(0, U)]''.
    *
    * The return value needs not be different for different values of [[structureIdx]]. E.g. the [[CongOperator]]
    * uses this trait with [[relationArity]] == 2, but identifies both models in a smart way when overriding this
    * function and [[inRelation()]].
    *
    * @param structureIdx A number in {0, ..., relationArity - 1}.
    * @return An SFOL term of type [[SFOL.tp]].
    */
  protected def applyTypeSymbolRef(structureIdx: Int, tp: GlobalName)(implicit state: T): Term

  /**
    * Constructs the term representing that [[relationArity]]-many arguments are in relation between
    * the tp-universes of all the models.
    *
    * Read the documentation for [[applyFunctionSymbol()]]. In the examples there, terms like ''Uʰ x¹₁ … xᵐ₁''
    * actually mean the return value of ''inRelation(U, List(x¹₁, …, xᵐ₁))''.
    *
    * @param tp The original type symbol declaration.
    * @param arguments List of arguments of size exactly [[relationArity]].
    * @return An SFOL-term of type [[SFOL.prop]].
    */
  protected def inRelation(tp: GlobalName, arguments: List[Term])(implicit state: T): Term

  private case class FunctionOrPredicateSymbolData(
                                                    forallContext: Context,
                                                    antecedence: Option[Term],

                                                    /**
                                                      * of size exactly [[relationArity]]
                                                      */
                                                    consequenceArguments: List[Term]
                                                  ) {
    require(consequenceArguments.size == relationArity)
  }

  /**
    * Constructs the closure axiom for functions between [[relationArity]]-many models of some SFOL theory.
    *
    * @example Suppose you have ''U: tp, ∘: tm U ⟶ tm U ⟶ tm U'' (a magma) in some MMT theory with meta theory being
    *          SFOL.
    *          Moreover, suppose [[relationArity]] == 1 (as [[SubOperator]] does). Then, calling this function as in
    *          ''applyFunctionSymbol(∘, List(U, U), U)'' results in term that you can see in the type component
    *          of ∘ʰ below:
    *
    *          {{{
    *            // vvv this is the intended context
    *            Uᵖ: tp
    *            Uʰ: tm Uᵖ ⟶ prop
    *            ∘ᵖ: tm Uᵖ ⟶ tm Uᵖ ⟶ tm Uᵖ
    *            // ^^^
    *            // vvv return value of this function
    *            ∘ʰ: ⊢ ∀[x₁: tm Uᵖ, x₂: tm Uᵖ]
    *                     (Uʰ x₁) ∧ (Uʰ x₂) ⇒ Uʰ (∘ᵖ x₁ x₂)
    *          }}}
    *
    *          The return value of this function is supposed to be used in a type component, say, of a constant ∘ʰ.
    *          You can read ∘ʰ as the axiom stating that the subtype of Uᵖ selected by Uʰ is closed under ∘ᵖ.
    *          Hence, the above snippet of MMT constants represents magma submodels.
    *
    * @example The general case is as follows. Beware, this might be hard to read, so best to think in concrete examples
    *          first.
    *          Suppose ''t₁, …, tₙ, t: tp'' and ''∘: tm t₁ ⟶ … ⟶ tm tₙ ⟶ tm t'' is a function symbol declaration.
    *          Moreover, abbreviate [[relationArity]] by m.
    *          Then ''applyFunctionSymbol(∘, List(t₁, …, tₙ), t)'' results in:
    *
    *          {{{
    *          ∘ʰ: ⊢ ∀[x¹₁ … x¹ₙ    // types omitted for readability here
    *                 …            // they are present in the return value
    *                 xᵐ₁ … xᵐₙ]
    *
    *                    (Uʰ x¹₁ … xᵐ₁) ∧ … ∧ (Uʰ x¹ₙ … xᵐₙ) ⇒ Uʰ (∘ᵈ¹ x¹₁ … x¹ₙ) … (∘ᵈᵐ xᵐ₁ … xᵐₙ)
    *          }}}
    *
    * @param symbol The original function symbol.
    * @param argTypes The argument SFOL-types. E.g. if you have ''op: tm X ⟶ tm Y ⟶ tm Z'' (in context of a theory
    *                 with ''X: tp, Y: tp, Z: tp''), then ''argTypes = List(X, Y)'' (i.e. the [[GlobalName]]s of them).
    * @param retType The return SFOL-type. E.g. if you have again ''op'', then ''retType = Z''.
    */
  def applyFunctionSymbol(symbol: GlobalName, argTypes: List[GlobalName], retType: GlobalName)(implicit state: T): Term = {
    val data = applyFunctionOrPredicateSymbol(symbol, argTypes)
    val consequence = inRelation(retType, data.consequenceArguments)

    val closureCondition: Term = SFOL.ded(
      SFOL.forallMany(data.forallContext, SFOL.implOption(data.antecedence, consequence))
    )

    closureCondition
  }

  /**
    * Constructs the closure axiom for predicates between [[relationArity]]-many models of some SFOL theory.
    *
    * Only makes sense for [[relationArity]] >= 2 (supposedly).
    *
    * @example Suppose you have ''U: tp, $: tm U ⟶ tm U ⟶ prop'' (e.g. think of terms of type U as vertices of
    *          a graph and $ as the "has edge" predicate) in some MMT theory with meta theory being
    *          SFOL.
    *          Moreover, suppose [[relationArity]] == 2. Then, calling this function as in
    *          ''applyFunctionSymbol($, List(U, U), U)'' results in term that you can see in the type component
    *          of $ʰ below:
    *
    *          {{{
    *            // vvv this is the intended context
    *            U₁, U₂: tp
    *            Uʰ: tm U₁ ⟶ tm U₂ ⟶ prop
    *
    *            $₁: tm U₁ ⟶ tm U₁ ⟶ prop
    *            $₂: tm U₂ ⟶ tm U₂ ⟶ prop
    *            // ^^^
    *            // vvv return value of this function
    *            $ʰ: ⊢ ∀[x¹₁: tm Uᵈ, x¹₂: tm Uᶜ,
    *                   x²₁: tm Uᵈ, x²₂: tm Uᶜ]
    *                     (Uʰ x¹₁ x¹₂) ∧ (Uʰ x²₁ x²₂) ⇒ ((x¹₁ $₁ x²₁) ⇔ (x¹₂ $₂ x²₂))
    *          }}}
    *
    *          The return value of this function is supposed to be used in a type component, say, of a constant $.
    *          You can read $ʰ as the axiom stating that the output of $ in all models is the same whenever
    *          for all argument positions (say first one) the individual arguments (say x¹₁ and x¹₂) are related
    *          by Uʰ.
    *
    * @example The general case is the same as for [[applyFunctionSymbol()]] with the modification that for the
    *          consequence of the implication, instead of
    *          {{{
    *            Uʰ (∘ᵈ¹ x¹₁ … x¹ₙ) … (∘ᵈᵐ xᵐ₁ … xᵐₙ)
    *          }}}
    *          we have
    *          {{{
    *            (∘ᵈ¹ x¹₁ … x¹ₙ) ⇔ … ⇔ (∘ᵈᵐ xᵐ₁ … xᵐₙ)
    *          }}}
    *          where ''⇔ … ⇔'' is to be read mathematically. That is, ''a ⇔ b ⇔ c'' is syntactic sugar (on the level
    *          of this natural language Scala comment) for ''(a ⇔ b) ∧ (b ⇔ c)''.
    *
    * @param symbol The original function symbol.
    * @param argTypes The argument SFOL-types. E.g. if you have ''$: tm X ⟶ tm Y ⟶ prop'' (in context of a theory
    *                 with ''X: tp, Y: tp''), then ''argTypes = List(X, Y)'' (i.e. the [[GlobalName]]s of them).
    */
  def applyPredicateSymbol(symbol: GlobalName, argTypes: List[GlobalName])(implicit state: T): Term = {
    require(relationArity >= 2)
    val data = applyFunctionOrPredicateSymbol(symbol, argTypes)

    val consequence = SFOL.biimplChain(data.consequenceArguments : _*)

    val closureCondition: Term = SFOL.ded(
      SFOL.forallMany(data.forallContext, SFOL.implOption(data.antecedence, consequence))
    )

    closureCondition
  }

  private def applyFunctionOrPredicateSymbol(symbol: GlobalName, argTypes: List[GlobalName])(implicit state: T): FunctionOrPredicateSymbolData = {
    assert(relationArity >= 1) // Navid hasn't thought about the case relationArity == 0 yet

    val variableDecls: List[List[VarDecl]] = argTypes.zipWithIndex.map {
      case (argTp, argIdx) =>
        Range(0, relationArity).map(structureIdx => {
          val name = LocalName(
            "x" +
              UnicodeStrings.superscriptInteger(argIdx) +

              // In the unary case, omitting the structureIdx (which is always 0 anyway) makes names more readable.
              (if (relationArity > 1) UnicodeStrings.subscriptInteger(structureIdx) else "")
          )
          val tp = applyTypeSymbolRef(structureIdx, argTp)

          VarDecl(name, tp)
        }).toList
    }

    val forallContext: Context = Context(variableDecls.flatten : _*)
    val variables: List[List[OMV]] = variableDecls.map(_.map(x => x.toTerm))

    val antecedence: Option[Term] = variables.zip(argTypes).map {
      case (relatedArguments, argTp) =>
        inRelation(argTp, relatedArguments)
    }.reduceLeftOption(SFOL.and(_, _))

    val consequenceArguments = Range(0, relationArity).map(structureIdx => {
      GeneralApplySpine(
        applyTypeSymbolRef(structureIdx, symbol),
        variables.map(_(structureIdx)) : _*
      )
    }).toList

    FunctionOrPredicateSymbolData(forallContext, antecedence, consequenceArguments)
  }
}

class NRelOperator(override val head: GlobalName, suffix: String, relationArity: Int, relationTheory: MPath) extends SimpleLinearOperator with OperatorDSL {
  override val operatorDomain: Diagram = Diagram.singleton(SFOL.sfoleqnd)
  override val operatorCodomain: Diagram = Diagram.singleton(SFOL.sfoleqnd)

  override protected def applyModuleName(name: LocalName): LocalName = name.suffixLastSimple(suffix)

  private val structureRenamers: List[SystematicRenamer[LinearState]] = Range(0, relationArity).map(structureIdx => {
    getRenamerFor("ᵈ" + UnicodeStrings.superscriptInteger(structureIdx))
  }).toList
  private val relRenamer = getRenamerFor("ʳ")

  object ClosureCreator extends ModRelClosureCreator[LinearState] {
    override def relationArity: Int = NRelOperator.this.relationArity

    override protected def applyTypeSymbolRef(structureIdx: Int, s: GlobalName)(implicit state: LinearState): Term =
      OMS(structureRenamers(structureIdx)(s))
    override protected def inRelation(tp: GlobalName, arguments: List[Term])(implicit state: LinearState): Term =
      ApplySpine(OMS(relRenamer(tp)), arguments : _*)
  }

  override protected def applyConstantSimple(c: Constant, tp: Term, df: Option[Term])(implicit state: LinearState, interp: DiagramInterpreter): List[Constant] = {
    val copies = structureRenamers.map(s => {
      const(s(c.path), s(tp), df.map(s(_)))
    })

    copies ::: (tp match {
      case SFOL.TypeSymbolType() =>
        val relTp = OMA(
          OMS(Path.parseS("http://gl.mathhub.info/MMT/LFX/Records?Symbols?ModelsOf")),
          List(OMPMOD(
            relationTheory,
            structureRenamers.map(s => SFOL.tm(s(c)))
          ))
        )
        // todo: also map definiens
        List(const(relRenamer(c.path), relTp, None))

      case SFOL.FunctionSymbolType(argTypes, retType) =>
        // todo: also map definiens
        List(const(relRenamer(c.path), ClosureCreator.applyFunctionSymbol(c.path, argTypes, retType), None))

      case SFOL.PredicateSymbolType(_) =>
        NotApplicable(c, "not applicable so far -- to be implemented")

      case SFOL.AxiomSymbolType() =>
        NotApplicable(c, "not applicable so far -- to be implemented")

      case _ =>
        NotApplicable(c, "unknown form")
    })
  }
}

class ModRelTransformer(relationArity: Int, relationTheory: MPath) extends SimpleLinearModuleTransformer with OperatorDSL {
  override val operatorDomain: Diagram = Diagram.singleton(SFOL.sfoleqnd)
  override val operatorCodomain: Diagram = Diagram.singleton(SFOL.sfoleqnd)

  override protected def applyModuleName(name: LocalName): LocalName = name.suffixLastSimple(s"_mod_rel${relationArity}${relationTheory.name}")

  val modelRenamers : Array[SystematicRenamer[LinearState]] = Range(0, relationArity).map(structureIdx => {
    getRenamerFor(UnicodeStrings.subscriptInteger(structureIdx))
  }).toArray

  val relationRenamer : SystematicRenamer[LinearState] = getRenamerFor("h")

  private val closureCreator = new ModRelClosureCreator[LinearState] {
    override def relationArity: Int = ModRelTransformer.this.relationArity

    override protected def applyTypeSymbolRef(structureIdx: Int, tp: GlobalName)(implicit state: SkippedDeclsExtendedLinearState): Term =
      OMS(modelRenamers(structureIdx)(tp))

    override protected def inRelation(tp: GlobalName, arguments: List[Term])(implicit state: SkippedDeclsExtendedLinearState): Term = {
      ApplySpine(
        Getfield(OMS(relationRenamer(tp)), LocalName("rel")),
        arguments : _*
      )
    }
  }

  override protected def applyConstantSimple(c: Constant, tp: Term, df: Option[Term])(implicit state: LinearState, interp: DiagramInterpreter): List[Constant] = {
    val modelCopies = modelRenamers.map(r => {
      const(r(c.path), r(tp), df.map(r(_)))
    }).toList

    modelCopies ::: (tp match {
      case SFOL.TypeSymbolType() =>
        val tps: List[Term] = modelRenamers.map(r => SFOL.tm(OMS(r(c.path)))).toList
        List(
          const(relationRenamer(c.path), ModelsOf(relationTheory, tps : _*), None)
        )

      case SFOL.FunctionSymbolType(argTypes, retType) =>
        List(
          const(relationRenamer(c.path), closureCreator.applyFunctionSymbol(c.path, argTypes, retType), None)
        )

      case SFOL.PredicateSymbolType(argTypes) =>
        List(
          const(relationRenamer(c.path), closureCreator.applyPredicateSymbol(c.path, argTypes), None)
        )

      case SFOL.AxiomSymbolType() =>
        NotApplicable(c, "ModRel operator doesn't support axioms yet")

      case _ =>
        NotApplicable(c, "ModRel operator doesn't support this constant type")
    })
  }
}

object ModRelOperator extends ParametricLinearOperator {
  override val head: GlobalName = Path.parseS("latin:/algebraic/diagop-test?AlgebraicDiagOps?modrel_operator")

  override def instantiate(parameters: List[Term])(implicit interp: DiagramInterpreter): Option[SimpleLinearModuleTransformer] = parameters match {
    case List(IntegerLiterals(relationArity), OMMOD(relationTheory)) =>

      if (!relationArity.isValidInt) {
        interp.errorCont(InvalidObject(OMA(OMS(head), parameters), s"Given relation arity `$relationArity` is too big to fit into a Scala Int"))
        return None
      }

      Some(new ModRelTransformer(relationArity.toInt, relationTheory))
    case _ =>
      interp.errorCont(InvalidObject(OMA(OMS(head), parameters), "cannot parse parameters. Expected integer literal and MPath"))
      None
  }
}
